// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  image         String?
  emailVerified DateTime?
  passwordHash  String?
  role          String    @default("user")
  phone         String?
  agencyName    String?
  resetToken    String?
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  // Back-relations
  listings         Listing[]        @relation("UserListings")
  favorites        Favorite[]
  leadsAsUser      Lead[]           @relation("LeadUser")
  leadsAsAgent     Lead[]           @relation("LeadAgent")
  conversations    ConversationParticipant[]
  messagesSent     Message[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Real estate domain models

model Listing {
  id           String         @id @default(cuid())
  agentId      String
  title        String
  description  String?
  price        Int
  currency     String         @default("USD")
  location     String
  type         String
  status       String         @default("active")
  publishedAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  agent        User           @relation("UserListings", fields: [agentId], references: [id], onDelete: Cascade)
  images       ListingImage[]
  favorites    Favorite[]
  leads        Lead[]
}

model ListingImage {
  id        String   @id @default(cuid())
  listingId String
  url       String
  sortOrder Int      @default(0)

  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Favorite {
  userId    String
  listingId String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@id([userId, listingId])
}

model Lead {
  id        String   @id @default(cuid())
  userId    String
  agentId   String
  listingId String?
  status    String   @default("new")
  message   String
  createdAt DateTime @default(now())

  user      User     @relation("LeadUser", fields: [userId], references: [id], onDelete: Cascade)
  agent     User     @relation("LeadAgent", fields: [agentId], references: [id], onDelete: Cascade)
  listing   Listing? @relation(fields: [listingId], references: [id])
}

model Conversation {
  id           String                     @id @default(cuid())
  title        String?                    // Optional title for group conversations
  isGroup      Boolean                    @default(false)
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt

  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  role           String       @default("member") // member, admin
  lastReadAt     DateTime?

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
  readAt         DateTime?

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
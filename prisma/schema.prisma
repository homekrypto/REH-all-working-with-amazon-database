generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                    @id @default(cuid())
  email              String?                   @unique
  name               String?
  image              String?
  emailVerified      DateTime?
  passwordHash       String?
  role               Role                      @default(USER)
  phone              String?
  agencyName         String?
  bio                String?
  packageId          String?
  subscriptionStatus SubscriptionStatus        @default(FREE)
  subscriptionEnd    DateTime?
  stripeCustomerId   String?
  resetToken         String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  accounts           Account[]
  conversations      ConversationParticipant[]
  emailVerifications EmailVerification[]
  favorites          Favorite[]
  leadsAsAgent       Lead[]                    @relation("LeadAgent")
  leadsAsUser        Lead[]                    @relation("LeadUser")
  listings           Listing[]                 @relation("UserListings")
  messagesSent       Message[]
  sessions           Session[]
  package            Package?                  @relation(fields: [packageId], references: [id])
}

model Package {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Int
  interval      String
  listingsMax   Int
  features      String
  stripePriceId String   @unique
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  users         User[]
}

model EmailVerification {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Listing {
  id              String         @id @default(cuid())
  agentId         String
  title           String
  slug            String?        @unique
  description     String?
  metaDescription String?
  price           Int
  currency        String         @default("USD")
  location        String
  type            String
  status          String         @default("active")
  publishedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  favorites       Favorite[]
  leads           Lead[]
  agent           User           @relation("UserListings", fields: [agentId], references: [id], onDelete: Cascade)
  images          ListingImage[]
}

model ListingImage {
  id            String   @id @default(cuid())
  listingId     String
  altText       String
  originalName  String
  imageSubject  String?
  storageKey    String   @unique
  url_large     String
  url_medium    String
  url_small     String
  url_thumbnail String
  url           String
  sortOrder     Int      @default(0)
  createdAt     DateTime @default(now())
  listing       Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Favorite {
  userId    String
  listingId String
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, listingId])
}

model Lead {
  id        String   @id @default(cuid())
  userId    String
  agentId   String
  listingId String?
  status    String   @default("new")
  message   String
  createdAt DateTime @default(now())
  agent     User     @relation("LeadAgent", fields: [agentId], references: [id], onDelete: Cascade)
  listing   Listing? @relation(fields: [listingId], references: [id])
  user      User     @relation("LeadUser", fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id           String                    @id @default(cuid())
  title        String?
  isGroup      Boolean                   @default(false)
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  role           String       @default("member")
  lastReadAt     DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
  readAt         DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  AGENT
  EXPERT
}

enum SubscriptionStatus {
  FREE
  PENDING
  ACTIVE
  CANCELED
  EXPIRED
}
